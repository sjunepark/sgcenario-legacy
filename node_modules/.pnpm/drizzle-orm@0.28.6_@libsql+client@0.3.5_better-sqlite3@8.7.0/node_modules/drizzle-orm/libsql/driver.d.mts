import type { Client, ResultSet } from '@libsql/client';
import { entityKind } from '../entity.js';
import type { SelectResult } from '../query-builders/select.types.js';
import { BaseSQLiteDatabase } from '../sqlite-core/db.js';
import type { SQLiteDelete, SQLiteInsert, SQLiteSelect, SQLiteUpdate } from '../sqlite-core/index.js';
import type { SQLiteRelationalQuery } from '../sqlite-core/query-builders/query.js';
import type { SQLiteRaw } from '../sqlite-core/query-builders/raw.js';
import { type DrizzleConfig } from '../utils.js';
export type BatchParameters = SQLiteUpdate<any, 'async', ResultSet, any> | SQLiteSelect<any, 'async', ResultSet, any, any> | SQLiteDelete<any, 'async', ResultSet, any> | Omit<SQLiteDelete<any, 'async', ResultSet, any>, 'where'> | Omit<SQLiteUpdate<any, 'async', ResultSet, any>, 'where'> | SQLiteInsert<any, 'async', ResultSet, any> | SQLiteRelationalQuery<'async', any> | SQLiteRaw<any>;
export type BatchResponse<U extends BatchParameters, TQuery extends Readonly<[U, ...U[]]>> = {
    [K in keyof TQuery]: TQuery[K] extends SQLiteSelect<infer _TTable, 'async', infer _TRes, infer TSelection, infer TSelectMode, infer TNullabilityMap> ? SelectResult<TSelection, TSelectMode, TNullabilityMap>[] : TQuery[K] extends SQLiteUpdate<infer _TTable, 'async', infer _TRunResult, infer _TReturning> ? _TReturning extends undefined ? _TRunResult : _TReturning[] : TQuery[K] extends Omit<SQLiteUpdate<infer _TTable, 'async', infer _TRunResult, infer _TReturning>, 'where'> ? _TReturning extends undefined ? _TRunResult : _TReturning[] : TQuery[K] extends SQLiteInsert<infer _TTable, 'async', infer _TRunResult, infer _TReturning> ? _TReturning extends undefined ? _TRunResult : _TReturning[] : TQuery[K] extends SQLiteDelete<infer _TTable, 'async', infer _TRunResult, infer _TReturning> ? _TReturning extends undefined ? _TRunResult : _TReturning[] : TQuery[K] extends Omit<SQLiteDelete<infer _TTable, 'async', infer _TRunResult, infer _TReturning>, 'where'> ? _TReturning extends undefined ? _TRunResult : _TReturning[] : TQuery[K] extends SQLiteRelationalQuery<'async', infer TResult> ? TResult : TQuery[K] extends SQLiteRaw<infer TResult> ? TResult : never;
};
export declare class LibSQLDatabase<TSchema extends Record<string, unknown> = Record<string, never>> extends BaseSQLiteDatabase<'async', ResultSet, TSchema> {
    static readonly [entityKind]: string;
    batch<U extends BatchParameters, T extends Readonly<[U, ...U[]]>>(batch: T): Promise<BatchResponse<U, T>>;
}
export declare function drizzle<TSchema extends Record<string, unknown> = Record<string, never>>(client: Client, config?: DrizzleConfig<TSchema>): LibSQLDatabase<TSchema>;
