'use strict';

var index = require('../index-1899b9ae.cjs');
var session = require('../session-90f70450.cjs');
require('@libsql/client');

var _a$1, _b, _c;
class LibSQLSession extends session.SQLiteSession {
    constructor(client, dialect, schema, options, tx) {
        super(dialect);
        this.client = client;
        this.schema = schema;
        this.options = options;
        this.tx = tx;
        this.logger = options.logger ?? new index.NoopLogger();
    }
    prepareQuery(query, fields, executeMethod, customResultMapper) {
        return new PreparedQuery(this.client, query.sql, query.params, this.logger, fields, this.tx, executeMethod, customResultMapper);
    }
    /*override */ batch(queries) {
        const queryToType = [];
        const builtQueries = queries.map((query) => {
            const builtQuery = this.dialect.sqlToQuery(query.getSQL());
            if (index.is(query, session.SQLiteSelect)) {
                // @ts-expect-error
                const prepared = query.prepare();
                prepared.fields === undefined
                    ? queryToType.push({ mode: 'all' })
                    : queryToType.push({
                        mode: 'all_mapped',
                        config: { fields: prepared.fields, joinsNotNullableMap: prepared.joinsNotNullableMap },
                    });
            }
            else if (index.is(query, session.SQLiteInsert) || index.is(query, session.SQLiteUpdate) || index.is(query, session.SQLiteDelete)) {
                queryToType.push(
                // @ts-expect-error
                query.config.returning
                    ? {
                        mode: 'all_mapped',
                        config: { fields: query.config.returning },
                    }
                    : { mode: 'raw' });
            }
            else if (index.is(query, session.SQLiteRaw)) {
                queryToType.push(query.config.action === 'run' ? { mode: 'raw' } : { mode: query.config.action });
            }
            else if (index.is(query, session.SQLiteRelationalQuery)) {
                const preparedRqb = query.prepare();
                queryToType.push({ mode: 'rqb', mapper: preparedRqb.customResultMapper });
            }
            return { sql: builtQuery.sql, args: builtQuery.params };
        });
        const res = this.client.batch(builtQueries).then((stmt) => stmt.map(({ rows }, index$1) => {
            const action = queryToType[index$1];
            if (action.mode === 'all') {
                return rows.map((row) => normalizeRow(row));
            }
            if (action.mode === 'all_mapped') {
                return rows.map((row) => {
                    return index.mapResultRow(action.config.fields, Array.prototype.slice.call(row).map((v) => normalizeFieldValue(v)), action.config.joinsNotNullableMap);
                });
            }
            if (action.mode === 'get') {
                return normalizeRow(rows[0]);
            }
            if (action.mode === 'values') {
                return rows.map((row) => Object.values(row));
            }
            if (action.mode === 'raw') {
                return stmt[index$1];
            }
            return action.mapper(rows, normalizeFieldValue);
        }));
        return res;
    }
    async transaction(transaction, _config) {
        // TODO: support transaction behavior
        const libsqlTx = await this.client.transaction();
        const session = new LibSQLSession(this.client, this.dialect, this.schema, this.options, libsqlTx);
        const tx = new LibSQLTransaction('async', this.dialect, session, this.schema);
        try {
            const result = await transaction(tx);
            await libsqlTx.commit();
            return result;
        }
        catch (err) {
            await libsqlTx.rollback();
            throw err;
        }
    }
}
_a$1 = index.entityKind;
LibSQLSession[_a$1] = 'LibSQLSession';
class LibSQLTransaction extends session.SQLiteTransaction {
    async transaction(transaction) {
        const savepointName = `sp${this.nestedIndex}`;
        const tx = new LibSQLTransaction('async', this.dialect, this.session, this.schema, this.nestedIndex + 1);
        await this.session.run(index.sql.raw(`savepoint ${savepointName}`));
        try {
            const result = await transaction(tx);
            await this.session.run(index.sql.raw(`release savepoint ${savepointName}`));
            return result;
        }
        catch (err) {
            await this.session.run(index.sql.raw(`rollback to savepoint ${savepointName}`));
            throw err;
        }
    }
}
_b = index.entityKind;
LibSQLTransaction[_b] = 'LibSQLTransaction';
class PreparedQuery extends session.PreparedQuery {
    constructor(client, queryString, params, logger, fields, tx, executeMethod, customResultMapper) {
        super('async', executeMethod);
        this.client = client;
        this.queryString = queryString;
        this.params = params;
        this.logger = logger;
        this.tx = tx;
        this.customResultMapper = customResultMapper;
        this.fields = fields;
    }
    run(placeholderValues) {
        const params = index.fillPlaceholders(this.params, placeholderValues ?? {});
        this.logger.logQuery(this.queryString, params);
        const stmt = { sql: this.queryString, args: params };
        return this.tx ? this.tx.execute(stmt) : this.client.execute(stmt);
    }
    async all(placeholderValues) {
        const { fields, joinsNotNullableMap, logger, queryString, tx, client, customResultMapper } = this;
        if (!fields && !customResultMapper) {
            const params = index.fillPlaceholders(this.params, placeholderValues ?? {});
            logger.logQuery(queryString, params);
            const stmt = { sql: queryString, args: params };
            return (tx ? tx.execute(stmt) : client.execute(stmt)).then(({ rows }) => rows.map((row) => normalizeRow(row)));
        }
        const rows = await this.values(placeholderValues);
        if (customResultMapper) {
            return customResultMapper(rows, normalizeFieldValue);
        }
        return rows.map((row) => {
            return index.mapResultRow(fields, Array.prototype.slice.call(row).map((v) => normalizeFieldValue(v)), joinsNotNullableMap);
        });
    }
    async get(placeholderValues) {
        const { fields, joinsNotNullableMap, logger, queryString, tx, client, customResultMapper } = this;
        if (!fields && !customResultMapper) {
            const params = index.fillPlaceholders(this.params, placeholderValues ?? {});
            logger.logQuery(queryString, params);
            const stmt = { sql: queryString, args: params };
            return (tx ? tx.execute(stmt) : client.execute(stmt)).then(({ rows }) => normalizeRow(rows[0]));
        }
        const rows = await this.values(placeholderValues);
        if (!rows[0]) {
            return undefined;
        }
        if (customResultMapper) {
            return customResultMapper(rows, normalizeFieldValue);
        }
        return index.mapResultRow(fields, Array.prototype.slice.call(rows[0]).map((v) => normalizeFieldValue(v)), joinsNotNullableMap);
    }
    values(placeholderValues) {
        const params = index.fillPlaceholders(this.params, placeholderValues ?? {});
        this.logger.logQuery(this.queryString, params);
        const stmt = { sql: this.queryString, args: params };
        return (this.tx ? this.tx.execute(stmt) : this.client.execute(stmt)).then(({ rows }) => rows);
    }
}
_c = index.entityKind;
PreparedQuery[_c] = 'LibSQLPreparedQuery';
function normalizeRow(obj) {
    // The libSQL node-sqlite3 compatibility wrapper returns rows
    // that can be accessed both as objects and arrays. Let's
    // turn them into objects what's what other SQLite drivers
    // do.
    return Object.keys(obj).reduce((acc, key) => {
        if (Object.prototype.propertyIsEnumerable.call(obj, key)) {
            acc[key] = obj[key];
        }
        return acc;
    }, {});
}
function normalizeFieldValue(value) {
    if (value instanceof ArrayBuffer) { // eslint-disable-line no-instanceof/no-instanceof
        if (typeof Buffer !== 'undefined') {
            if (!(value instanceof Buffer)) { // eslint-disable-line no-instanceof/no-instanceof
                return Buffer.from(value);
            }
            return value;
        }
        if (typeof TextDecoder !== 'undefined') {
            return new TextDecoder().decode(value);
        }
        throw new Error('TextDecoder is not available. Please provide either Buffer or TextDecoder polyfill.');
    }
    return value;
}

var _a;
class LibSQLDatabase extends session.BaseSQLiteDatabase {
    async batch(batch) {
        return await this.session.batch(batch);
    }
}
_a = index.entityKind;
LibSQLDatabase[_a] = 'LibSQLDatabase';
function drizzle(client, config = {}) {
    const dialect = new session.SQLiteAsyncDialect();
    let logger;
    if (config.logger === true) {
        logger = new index.DefaultLogger();
    }
    else if (config.logger !== false) {
        logger = config.logger;
    }
    let schema;
    if (config.schema) {
        const tablesConfig = index.extractTablesRelationalConfig(config.schema, index.createTableRelationsHelpers);
        schema = {
            fullSchema: config.schema,
            schema: tablesConfig.tables,
            tableNamesMap: tablesConfig.tableNamesMap,
        };
    }
    const session$1 = new LibSQLSession(client, dialect, schema, { logger }, undefined);
    return new LibSQLDatabase('async', dialect, session$1, schema);
}

exports.LibSQLDatabase = LibSQLDatabase;
exports.LibSQLSession = LibSQLSession;
exports.LibSQLTransaction = LibSQLTransaction;
exports.PreparedQuery = PreparedQuery;
exports.drizzle = drizzle;
//# sourceMappingURL=index.cjs.map
